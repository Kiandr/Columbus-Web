<script src="https://www.gstatic.com/firebasejs/4.5.0/firebase-app.js"></script>
<script src="http://knockoutjs.com/downloads/knockout-3.0.0.debug.js" type="text/javascript"></script>

@Styles.Render("~/Content/css")
@Scripts.Render("~/bundles/googleFireBase")
@Scripts.Render("~/bundles/knockout")

@{
    ViewBag.Title = "GoogleFireBase";
}

<h2>Nurse Next Door  Signin via Google</h2>
<button id="singin" data-bind="visible: shouldShowSingInMessage" onclick="CallGoogleSinIn()" class="btn btn-default"> Google Single Sing In </button>
<button id="singout"   data-bind="visible: shouldShowSingOutMessage" onclick="CallGoogleSinOut()" class="btn btn-defaultt"> Google Single Sing Out</button>
<div data-bind="visible: shouldShowMessage">
    You will see this message only when "shouldShowMessage" holds a true value.
</div>

<img data-bind="attr:{ src: userImage }" style="width:128px;height:128px"/>

<p>Full Name: <input data-bind="value: displayName" /></p>
<p>Email: <input data-bind="value: email" /></p>
<h2> <span data-bind="text: welcomingMessage"> </span></h2>

<div id="timeline" style="height: 180px; margin: auto;"></div>
<div id="example5.2" style="height: 300px;margin: auto;"></div>
<div id="regions_div" style="width: 900px; height: 500px;     margin: auto;"></div>
<div id="chart_div" style="width: 400px; height: 120px;     margin: auto;"></div>
<div id="theDiv"></div>
<div id="error"></div>
<div id="columnchart_material" style="width: 100%; height: 100%;"  margin: auto;></div>


<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>




<script>

    //$(window).load(function () {
    //    // Run code
    //    alert("loaded");
    //// Here's my data model
    //    var ViewModel = function (first, last) {
    //        this.firstName = ko.observable(first);
    //        this.lastName = ko.observable(last);

    //        this.fullName = ko.computed(function () {
    //            // Knockout tracks dependencies automatically. It knows that fullName depends on firstName and lastName, because these get called when evaluating fullName.
    //            return this.firstName() + " " + this.lastName();
    //        }, this);
    //    };

    //    ko.applyBindings(new ViewModel("Planet", "Earth")); // This makes Knockout get to work


    
    //});

</script>


@*
<script>
    /*
    Auhtor: Kian D.Rad
    Date: Oct 20th 2017
    README: loading three different google maps.
    */

    /*
    function KianPerform() {
        google.charts.load('current', { 'packages': ['gauge'] });
        google.charts.setOnLoadCallback(drawChart);

        function drawChart() {

            var data = google.visualization.arrayToDataTable([
              ['Label', 'Value'],
              ['NPS', 50],
              ['Intakes', 100],
              ['ScoreCard', 0]
            ]);

            var options = {
                width: 400, height: 120,
                redFrom: 90, redTo: 100,
                yellowFrom: 75, yellowTo: 90,
                minorTicks: 5
            };

            var chart = new google.visualization.Gauge(document.getElementById('chart_div'));

            chart.draw(data, options);

            setInterval(function () {
                data.setValue(0, 1, 50 + Math.round(60 * Math.random()));
                chart.draw(data, options);
            }, 13000);
            setInterval(function () {
                data.setValue(1, 1, 30 + Math.round(60 * Math.random()));
                chart.draw(data, options);
            }, 5000);
            setInterval(function () {
                data.setValue(2, 1, 60 + Math.round(20 * Math.random()));
                chart.draw(data, options);
            }, 26000);
        }


    };
    function HerbertPerform() {
        debugger;
        google.charts.load('current', { 'packages': ['gauge'] });
        google.charts.setOnLoadCallback(drawChart);

        function drawChart() {

            var data = google.visualization.arrayToDataTable([
              ['NPS', 100],
              ['Intakes', 100],
              ['ScoreCard', 50]
            ]);




            var options = {
                width: 400, height: 120,
                redFrom: 90, redTo: 100,
                yellowFrom: 75, yellowTo: 90,
                minorTicks: 5
            };

            var chart = new google.visualization.Gauge(document.getElementById('chart_div'));

            chart.draw(data, options);

            setInterval(function () {
                data.setValue(0, 1, 10 + Math.round(60 * Math.random()));
                chart.draw(data, options);
            }, 13000);
            setInterval(function () {
                data.setValue(1, 1, 10 + Math.round(60 * Math.random()));
                chart.draw(data, options);
            }, 5000);
            setInterval(function () {
                data.setValue(2, 1, 100 + Math.round(20 * Math.random()));
                chart.draw(data, options);
            }, 26000);
        }


    };
    function Kian() {
        debugger;
        google.charts.load('current', {
            'packages': ['geochart'],
            // Note: you will need to get a mapsApiKey for your project.
            // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings
            'mapsApiKey': 'AIzaSyD-9tSrke72PouQMnMX-a7eZSW0jkFMBWY'
        });
        google.charts.setOnLoadCallback(drawRegionsMap);

        function drawRegionsMap() {
            var data = google.visualization.arrayToDataTable([
              ['Country', 'Popularity'],
              ['Spain', 2000],
              ['Greece', 300000],
              ['Japan', 4000000],
              ['Jordan', 800000],
               ['Italy', 800000],
               ['Canada', 1200000]
            ]);

            var options = {};

            var chart = new google.visualization.GeoChart(document.getElementById('regions_div'));

            chart.draw(data, options);
        }
    };
    function Herbert() {
        debugger;
        google.charts.load('current', {
            'packages': ['geochart'],
            // Note: you will need to get a mapsApiKey for your project.
            // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings
            'mapsApiKey': 'AIzaSyD-9tSrke72PouQMnMX-a7eZSW0jkFMBWY'
        });
        google.charts.setOnLoadCallback(drawRegionsMap);

        function drawRegionsMap() {
            var data = google.visualization.arrayToDataTable([
              ['Country', 'Popularity'],
              ['Germany', 200],
              ['United States', 300],
              ['Brazil', 400],
              ['Canada', 500],
              ['France', 600],
              ['RU', 700]
            ]);

            var options = {};

            var chart = new google.visualization.GeoChart(document.getElementById('regions_div'));

            chart.draw(data, options);
        }
    };
    function thirdMan() {



        debugger;
        google.charts.load('current', {
            'packages': ['geochart'],
            // Note: you will need to get a mapsApiKey for your project.
            // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings
            'mapsApiKey': 'AIzaSyD-9tSrke72PouQMnMX-a7eZSW0jkFMBWY'
        });
        google.charts.setOnLoadCallback(drawRegionsMap);

        function drawRegionsMap() {
            var data = google.visualization.arrayToDataTable([
              ['Country', 'Popularity'],
              ['RU', 200000],
              ['United States', 30000]
            ]);

            var options = {};

            var chart = new google.visualization.GeoChart(document.getElementById('regions_div'));

            chart.draw(data, options);
        }

    };
    function thirdManPerform()
    */
    // Initialize Firebase
    /*
    Auhtor: Kian D.Rad
    Date: Oct 17th 2017
    ReadMe: Test file, to authenticate the firebase
    ToDO: Take out this to javascript file with propoer data models
    */

    var config = {
        apiKey: "AIzaSyC8KloedMvZLdSqUMk74oE7IM0SF9bJCrw",
        authDomain: "idermatoscope.firebaseapp.com",
        databaseURL: "https://idermatoscope.firebaseio.com",
        projectId: "idermatoscope",
        storageBucket: "idermatoscope.appspot.com",
        messagingSenderId: "960111575797"
    };

    firebase.initializeApp(config);

    function CallGoogleSinIn() {

        console.log("singInToGoogleNow");

        var provider = new firebase.auth.GoogleAuthProvider();
        firebase.auth().signInWithRedirect(provider);
        provider.addScope('https://www.googleapis.com/auth/plus.login');
        firebase.auth().languageCode = 'el';
        firebase.auth().signInWithRedirect(provider);


    };

    var config = {
    apiKey: "AIzaSyBRGDNklfhLgeYdMutMuOQnv3jqfDyCRj0",
    authDomain: "nursenextdoor-ad735.firebaseapp.com",
    databaseURL: "https://nursenextdoor-ad735.firebaseio.com",
    projectId: "nursenextdoor-ad735",
    storageBucket: "nursenextdoor-ad735.appspot.com",
    messagingSenderId: "142428877752"
  
    };
    function addPic(url) {
      debugger;
      $('#theDiv').prepend($('<img>', { id: 'theImg', src: url }));

  };
    function writeError(string) {
      debugger;
      $('#error').append(string);

  };



    firebase.auth().onAuthStateChanged(user => {
      if(user) {

          console.log(user);


          addPic(user.photoURL);



      }
  });
      // Listening for auth state changes.
      // [START authstatelistener]
    firebase.auth().onAuthStateChanged(function (user) {
      debugger;
     // alert("here");
          if (user) {
              // User is signed in.
              var displayName = user.displayName;
              var email = user.email;
              var emailVerified = user.emailVerified;
              var photoURL = user.photoURL;
              var isAnonymous = user.isAnonymous;
              var uid = user.uid;
              var providerData = user.providerData;
              debugger;
              if (email === "davoudi.rk@gmail.com") {
                  Kian();
                  KianPerform();
                  POCBarChartKian();
                  POCTimeLineKian();
              }
              else if (email === "herbert.bossaerts@nursenextdoor.com") {
                  Herbert();
                  HerbertPerform();
                  POCBarChartHerbert();
                  POCTimeLineHerbert();
              }
              else {

                  thirdMan();
                  thirdManPerform();
                  POCBarChartThirdMan();
                  POCTimeLineThirdMan();
              }
              // [START_EXCLUDE]
              document.getElementById('quickstart-sign-in-status').textContent = 'Signed in';
              document.getElementById('quickstart-sign-in').textContent = 'Sign out';
//              document.getElementById('quickstart-account-details').textContent = JSON.stringify(user, null, '  ');

              // [END_EXCLUDE]
          } else {
              // User is signed out.
              // [START_EXCLUDE]
              document.getElementById('quickstart-sign-in-status').textContent = 'Signed out';
              document.getElementById('quickstart-sign-in').textContent = 'Sign in with GitHub';
              document.getElementById('quickstart-account-details').textContent = 'null';
              document.getElementById('quickstart-oauthtoken').textContent = 'null';
              // [END_EXCLUDE]
          }
          // [START_EXCLUDE]

          // [END_EXCLUDE]
      });
      // [END authstatelistener]
  function CallGoogleSinOut() {


      firebase.auth().signOut().then(function () {
          // Sign-out successful.
          debugger;
          $('#theImg').remove();
          thirdMan();

      }).catch(function (error) {
          // An error happened.
          writeError("failed singout!");
      });


  };
    /*
    SOS: This is the POC code, the whole thing should go to an other project.
    Author: Kian D.Rad
    Date: Oct 20th 2017
    README: bar graph chart, it loads based on user.
    */
    /*
  function POCBarChartKian() {

      google.charts.load('current', { 'packages': ['bar'] });
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {
          var data = google.visualization.arrayToDataTable([
            ['Year', 'Sales', 'Expenses', 'Profit'],
            ['2014', 1000, 400, 200],
            ['2015', 1170, 460, 250],
            ['2016', 660, 1120, 300],
            ['2017', 1030, 540, 350]
          ]);

          var options = {
              chart: {
                  title: 'Company Performance',
                  subtitle: 'Sales, Expenses, and Profit: 2014-2017',
              }
          };

          var chart = new google.charts.Bar(document.getElementById('columnchart_material'));

          chart.draw(data, google.charts.Bar.convertOptions(options));
      }
  };
  function POCBarChartHerbert() {

      google.charts.load('current', { 'packages': ['bar'] });
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {
          var data = google.visualization.arrayToDataTable([
            ['Year', 'Sales', 'Expenses', 'Profit'],
            ['2014', 2000, 100, 2100],
            ['2015', 21170, 0, 2500],
            ['2016', 2660, 21120, 3000],
            ['2017', 21030, 2540, 3050]
          ]);

          var options = {
              chart: {
                  title: 'Company Performance',
                  subtitle: 'Sales, Expenses, and Profit: 2014-2017',
              }
          };

          var chart = new google.charts.Bar(document.getElementById('columnchart_material'));

          chart.draw(data, google.charts.Bar.convertOptions(options));
      }
  };
  function POCBarChartThirdMan() {

      google.charts.load('current', { 'packages': ['bar'] });
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {
          var data = google.visualization.arrayToDataTable([
            ['Year', 'Sales', 'Expenses', 'Profit'],
            ['2014', 10, 40, 0],
            ['2015', 10, 40, 0],
            ['2016', 60, 110, 300],
            ['2017', 130, 540, 350]
          ]);

          var options = {
              chart: {
                  title: 'Company Performance',
                  subtitle: 'Sales, Expenses, and Profit: 2014-2017',
              }
          };

          var chart = new google.charts.Bar(document.getElementById('columnchart_material'));

          chart.draw(data, google.charts.Bar.convertOptions(options));
      }
  };
  function POCTimeLineKian() {
      google.charts.load("current", { packages: ["timeline"] });
      google.charts.setOnLoadCallback(drawChart);
      function drawChart() {

          var container = document.getElementById('example5.2');
          var chart = new google.visualization.Timeline(container);
          var dataTable = new google.visualization.DataTable();

          dataTable.addColumn({ type: 'string', id: 'Room' });
          dataTable.addColumn({ type: 'string', id: 'Name' });
          dataTable.addColumn({ type: 'date', id: 'Start' });
          dataTable.addColumn({ type: 'date', id: 'End' });
          dataTable.addRows([
            ['Kian', 'John F.', new Date(0, 0, 0, 12, 0, 0), new Date(0, 0, 0, 14, 0, 0)],
            ['Herbert', 'Mary H.', new Date(0, 0, 0, 14, 30, 0), new Date(0, 0, 0, 16, 0, 0)],
            ['Henry', 'Joe K.', new Date(0, 0, 0, 16, 30, 0), new Date(0, 0, 0, 19, 0, 0)],
            ['Vanessa', 'Pter Perl', new Date(0, 0, 0, 12, 30, 0), new Date(0, 0, 0, 14, 0, 0)],
            ['Kevin', 'George P.', new Date(0, 0, 0, 14, 30, 0), new Date(0, 0, 0, 16, 0, 0)],
            ['Peter', 'Ale K.', new Date(0, 0, 0, 16, 30, 0), new Date(0, 0, 0, 18, 0, 0)],
            ['Maria', 'Henry C.', new Date(0, 0, 0, 12, 30, 0), new Date(0, 0, 0, 14, 0, 0)],
            ['Alex', 'Rose', new Date(0, 0, 0, 14, 30, 0), new Date(0, 0, 0, 16, 0, 0)],
            ['John', 'Kevin D.', new Date(0, 0, 0, 16, 30, 0), new Date(0, 0, 0, 18, 30, 0)]]);

          var options = {
              timeline: { singleColor: '#8d8' },
          };

          chart.draw(dataTable, options);
      }
  };
  function POCTimeLineHerbert() {
      google.charts.load("current", { packages: ["timeline"] });
      google.charts.setOnLoadCallback(drawChart);
      function drawChart() {

          var container = document.getElementById('example5.2');
          var chart = new google.visualization.Timeline(container);
          var dataTable = new google.visualization.DataTable();

          dataTable.addColumn({ type: 'string', id: 'Room' });
          dataTable.addColumn({ type: 'string', id: 'Name' });
          dataTable.addColumn({ type: 'date', id: 'Start' });
          dataTable.addColumn({ type: 'date', id: 'End' });
          dataTable.addRows([
            ['Jenna ', 'Mary F.', new Date(0, 0, 0, 12, 0, 0), new Date(0, 0, 0, 14, 0, 0)],
            ['Agenla ', 'Intro JavaScript', new Date(0, 0, 0, 14, 30, 0), new Date(0, 0, 0, 16, 0, 0)],
            ['Kathy', 'Advanced JavaScript', new Date(0, 0, 0, 16, 30, 0), new Date(0, 0, 0, 19, 0, 0)],
            ['Herbert', 'Intermediate Perl', new Date(0, 0, 0, 12, 30, 0), new Date(0, 0, 0, 14, 0, 0)],
            ['Vanessa', 'Advanced Perl', new Date(0, 0, 0, 14, 30, 0), new Date(0, 0, 0, 16, 0, 0)],
            ['Saei', 'Applied Perl', new Date(0, 0, 0, 16, 30, 0), new Date(0, 0, 0, 18, 0, 0)],
            ['Ares', 'Google Charts', new Date(0, 0, 0, 12, 30, 0), new Date(0, 0, 0, 14, 0, 0)],
            ['Kevin', 'Closure', new Date(0, 0, 0, 14, 30, 0), new Date(0, 0, 0, 16, 0, 0)],
            ['Craig', 'App Engine', new Date(0, 0, 0, 16, 30, 0), new Date(0, 0, 0, 18, 30, 0)]]);

          var options = {
              timeline: { singleColor: '#8d8' },
          };

          chart.draw(dataTable, options);
      }
  };
  function POCTimeLineThirdMan() {
      google.charts.load("current", { packages: ["timeline"] });
      google.charts.setOnLoadCallback(drawChart);
      function drawChart() {

          var container = document.getElementById('example5.2');
          var chart = new google.visualization.Timeline(container);
          var dataTable = new google.visualization.DataTable();

          dataTable.addColumn({ type: 'string', id: 'Room' });
          dataTable.addColumn({ type: 'string', id: 'Name' });
          dataTable.addColumn({ type: 'date', id: 'Start' });
          dataTable.addColumn({ type: 'date', id: 'End' });
          dataTable.addRows([
            ['Magnolia Room', 'CSS Fundamentals', new Date(0, 0, 0, 12, 0, 0), new Date(0, 0, 0, 14, 0, 0)],
            ['Magnolia Room', 'Intro JavaScript', new Date(0, 0, 0, 14, 30, 0), new Date(0, 0, 0, 16, 0, 0)],
            ['Magnolia Room', 'Advanced JavaScript', new Date(0, 0, 0, 16, 30, 0), new Date(0, 0, 0, 19, 0, 0)],
            ['Gladiolus Room', 'Intermediate Perl', new Date(0, 0, 0, 12, 30, 0), new Date(0, 0, 0, 14, 0, 0)],
            ['Gladiolus Room', 'Advanced Perl', new Date(0, 0, 0, 14, 30, 0), new Date(0, 0, 0, 16, 0, 0)],
            ['Gladiolus Room', 'Applied Perl', new Date(0, 0, 0, 16, 30, 0), new Date(0, 0, 0, 18, 0, 0)],
            ['Petunia Room', 'Google Charts', new Date(0, 0, 0, 12, 30, 0), new Date(0, 0, 0, 14, 0, 0)],
            ['Petunia Room', 'Closure', new Date(0, 0, 0, 14, 30, 0), new Date(0, 0, 0, 16, 0, 0)],
            ['Petunia Room', 'App Engine', new Date(0, 0, 0, 16, 30, 0), new Date(0, 0, 0, 18, 30, 0)]]);

          var options = {
              timeline: { singleColor: '#8d8' },
          };

          chart.draw(dataTable, options);
      }
  };

  */

</script>













*@







